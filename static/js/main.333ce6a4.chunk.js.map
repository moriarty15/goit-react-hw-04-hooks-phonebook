{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Container.js","App.js","index.js","components/Container.module.css"],"names":["ContactForm","onSubmit","useState","name","setName","number","setNumber","handleAllInputChange","e","currentTarget","value","reset","className","preventDefault","trim","onChange","type","pattern","title","required","placeholder","ContactListItem","props","id","onDeleteContacts","onClick","ContactList","filter","map","Filter","Container","children","s","container","App","contacts","setContacts","setFilter","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","visibleContacts","normalizeFilter","toLowerCase","contact","includes","getVisibleContacts","data","some","alert","objd","uuidv4","contactId","reactDom","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.333ce6a4.chunk.js","sourcesContent":["import {useState } from 'react';\r\nimport PropTypes from \"prop-types\"\r\nimport \"./ContactForm.scss\";\r\n\r\nfunction ContactForm({onSubmit}) {\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n\r\n  const handleAllInputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value)\r\n        break;\r\n      case 'number':\r\n        setNumber(value)\r\n        break;\r\n      default: return\r\n    }\r\n  };\r\n\r\n  // функция записи новых абонентов в телефонную книгу\r\n  const handlePushContact = e => {\r\n    e.preventDefault();\r\n    if (name.trim() === '') return;\r\n\r\n    onSubmit({name, number});\r\n    reset()\r\n  };\r\n\r\n  const reset = () => {\r\n    setNumber('');\r\n    setName('');\r\n  }\r\n\r\n\r\n    return (\r\n      <div className=\"form__container\">\r\n        <form onSubmit={handlePushContact}>\r\n          <label className=\"label\">\r\n            Name\r\n            <input\r\n              className=\"input\"\r\n              value={name}\r\n              onChange={handleAllInputChange}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              placeholder=\"Enter Name\"\r\n            />\r\n          </label>\r\n          <label className=\"label\">\r\n            Number\r\n            <input\r\n              className=\"input\"\r\n              type=\"tel\"\r\n              value={number}\r\n              onChange={handleAllInputChange}\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              placeholder=\"Enter Number\"\r\n            />\r\n          </label>\r\n          <button className=\"add__button\">Add contact</button>\r\n        </form>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default ContactForm;\r\n\r\n\r\nContactForm.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n  }","import PropTypes from 'prop-types'\r\n\r\nexport default function ContactListItem(props) {\r\n  const { name, number, id, onDeleteContacts } = props;\r\n  return (\r\n    <>\r\n      <span>{name}: </span>\r\n      <span>{number} </span>\r\n      <button\r\n        className=\"button__delete\"\r\n        type=\"button\"\r\n        onClick={() => onDeleteContacts(id)}\r\n      >\r\n        delete\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nContactListItem.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    onDeleteContacts: PropTypes.func.isRequired,\r\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./ContactList.scss\";\nimport ContactListItem from \"./ContactListItem\";\n\nconst ContactList = ({ filter, onDeleteContacts }) => {\n  return (\n    <ul className=\"Contact__list\">\n      {filter.map(({ id, name, number }) => {\n        return (\n          <li key={id} className=\"Contact__item\">\n            <ContactListItem\n              name={name}\n              number={number}\n              id={id}\n              onDeleteContacts={onDeleteContacts}\n            />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\nexport default ContactList;\n\nContactList.propTypes = {\n  filter: PropTypes.array.isRequired,\n  id: PropTypes.string,\n}","import PropTypes from 'prop-types'\n\nconst Filter = ({ filter, onChange }) => {\n  return (\n    <label className=\"label\">\n      Find contacts by name\n      <input\n        className=\"input\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onChange}\n        placeholder=\"Enter search name\"\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  onChange: PropTypes.func,\n}\n","import s from './Container.module.css';\n\nexport default function Container({ children }) {\n  return (\n    <div className={s.container}>\n      <h1 className={s.title}>Phonebook</h1>\n      {children}\n    </div>\n  );\n}\n","import {useState, useEffect} from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport ContactForm from \"./components/ContactForm\";\r\nimport ContactList from \"./components/ContactList\";\r\nimport Filter from \"./components/Filter/Filter\";\r\nimport Container from \"./components/Container\";\r\n\r\nfunction App() {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [filter, setFilter] = useState('');\r\n\r\n  useEffect(() => {\r\n    const contacts = JSON.parse(localStorage.getItem(\"contacts\"));\r\n    if (contacts) {\r\n      setContacts([...contacts]);\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts))\r\n\r\n  }, [contacts])\r\n\r\n  // функция получения значения из любого инпута\r\n  const handleAllInputChange = (e) => {\r\n    const {value } = e.currentTarget;\r\n    setFilter(value);\r\n  };\r\n\r\n  // метод добавления контакта в телефонную книгу\r\n  const formSubmitHandler = (data) => {\r\n    // условие что контакт с таким именем есть в телефонной книге\r\n    if (contacts.some((e) => e.name.includes(data.name))) {\r\n      alert(`${data.name} is already in contacts`);\r\n      return;\r\n    }\r\n    // объект с именем и номером телефона для пуша в общий массив контактов\r\n    const objd = {\r\n      name: data.name,\r\n      number: data.number,\r\n      id: uuidv4(),\r\n    };\r\n    setContacts([objd, ...contacts]);\r\n  };\r\n  // метод удаления контакта из телефонной книги\r\n  const deleteContact = (contactId) => {\r\n    setContacts(contacts.filter(\r\n        (contact) => contact.id !== contactId\r\n      ),\r\n    )\r\n  };\r\n\r\n  // вынес фильтр в функцию\r\n  const getVisibleContacts = () => {\r\n    const normalizeFilter = filter.toLowerCase();\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizeFilter)\r\n    );\r\n  };\r\n\r\n    const visibleContacts = getVisibleContacts();\r\n    return (\r\n      <Container>\r\n        <ContactForm onSubmit={formSubmitHandler} />\r\n        <h2>Contacts</h2>\r\n        <Filter filter={filter} onChange={handleAllInputChange} />\r\n        <ContactList\r\n          filter={visibleContacts}\r\n          onDeleteContacts={deleteContact}\r\n        />\r\n      </Container>\r\n    );\r\n  \r\n}\r\n\r\nexport default App;\r\n","import reactDom from 'react-dom';\r\nimport App from './App';\r\nimport 'modern-normalize/modern-normalize.css';\r\n\r\nreactDom.render(<App />, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__zj1ul\",\"title\":\"Container_title__UxRoy\"};"],"sourceRoot":""}